openapi: "3.1.0"
info:
  title: Hack Hour API
  version: 1.0.0
  description: |-
    This is an unofficial API docs behind [Heidi the Hakkuun](https://github.com/hackclub/hack-hour), the Hack Club Slack bot that runs the `#arcade` channel for Summer of Making 2024 edition, built as part of Arcade 2024.

    ## Important note about API usage

    _This section is copied from upstream's README for brevity._

    There is no guarantee for the reliability of the API. If data is lost and/or is not registered for Arcade, there's not much we can do - use at your own risk.

    ## Getting your API token

    In any Hack Club channel, especially on `#arcade`, send `/api` to get (or rotate) your API token. The token is formatted like a UUID.
  contact:
    name: Andrei Jiroh Halili
    url: https://scrapbook.hackclub.com/andreijiroh-dev
    email: ajhalili2006@andreijiroh.xyz
  termsOfService: "https://hackclub.com/conduct"
  license:
    name: ISC
    url: "https://choosealicense.com/licenses/isc/"
externalDocs:
  description: Learn more about Hack Club Arcade
  url: https://hackclub.com/arcade
servers:
  - url: "https://hackhour.hackclub.com/api"
tags:
- name: sessions
  description: Operations relating to viewing and managing your Arcade sessions over API.
- name: meta
  description: "Operations relating to "
components:
  securitySchemes:
    hackHourApiToken:
      type: http
      scheme: bearer
      description: "Hack Hour API Token (UUID format)"
  schemas:
    # Standarized metadatas
    ArcadeGoal:
      type: object
      properties:
        name:
          type: string
          description: Name of the goal, usually long-running projects over the course of summer/winter.
          default: "No Goal"
        minutes:
          type: number
          description: "Number of minutes spent working on particular project"
    ArcadeSession:
      type: object
      properties:
        id:
          type: string
          default: "slackId"
        createdAt:
          type: string
          format: "date-time"
        time:
          type: number
          default: 60
        elapsed:
          type: number
          default: 15
        remaining:
          type: number
          default: 45
        endTime:
          type: string
          format: "date-time"
        goal:
          $ref: '#/components/schemas/ArcadeGoal/properties/name'
        work:
          type: string
        paused:
          type: boolean
          default: true
        completed:
          type: boolean
          default: false
        messageTs:
          type: string
          default: "todo"
    ArcadeStats:
      type: object
      properties:
        sessions:
          type: number
          default: 0
        total:
          type: number
          default: 0
    # API responses
    ArcadeSessions:
      type: array
      items:
        type: object
        properties:
          $ref: "#/components/schemas/ArcadeSession/properties"
    ArcadeGoals:
      type: array
      items:
        type: object
        properties:
            name:
              $ref: '#/components/schemas/ArcadeGoal/properties/name'
            minutes:
              $ref: '#/components/schemas/ArcadeGoal/properties/minutes'
    BackendStatus:
      type: object
      properties:
        activeSessions:
          type: number
          description: Number of active sessions at the moment.
        airtableConnected:
          type: boolean
          default: true
        slackConnected:
          type: boolean
          default: true
paths:
  /session/{slackId}:
    get:
      security:
        - hackHourApiToken: []
      tags: ["sessions"]
      summary: Get current session of a Arcade participant
      description: Queries a user's current session at the moment by their Slack user ID.
      operationId: getCurrentSessionByUserid
      parameters:
        - name: slackId
          in: path
          description: "Slack user ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return a object of `ArcadeSession` in the `data` 
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    default: true
                  data:
                    $ref: '#/components/schemas/ArcadeSession'
  /stats/{slackId}:
    get:
      tags: ["sessions"]
      security:
        - hackHourApiToken: []
      summary: "Get stats for a Slack user"
      operationId: getStatsByUserid
      parameters:
        - name: slackId
          in: path
          description: "Slack user ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return a object of `ArcadeSession` in the `data` 
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    default: true
                  data:
                    $ref: "#/components/schemas/ArcadeStats"
  /ping:
    get:
      tags: ["meta"]
      description: "Pings the server for uptime"
      responses:
        200:
          description: "The service is up and running."
          content:
            text/plain:
              schema:
                type: string
                default: "Pong" 
  /status:
    get:
      tags: ["meta"]
      description: "Get specific details on the status of the Hack Hour bot."
      responses:
        200:
          description: "Shows active sections, alongside connectivity status of the backend to Slack and Airtable APIs."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackendStatus"